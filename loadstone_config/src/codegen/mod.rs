//! Generates code from parsed .ron configuration. This is where
//! concrete Loadstone modules are constructed from user configuration
//! gathered from the web app GUI.
use quote::quote;
use std::{
    fs::{self, OpenOptions},
    io::Write,
    path::Path,
};

use anyhow::Result;
use crate::Configuration;
mod memory_map;

pub fn generate_modules<P: AsRef<Path>>(
    loadstone_path: P,
    configuration: &Configuration,
) -> Result<()> {
    let autogenerated_folder_path = loadstone_path.as_ref().join("src/autogenerated");
    fs::create_dir(&autogenerated_folder_path).ok();
    generate_top_level_module(&autogenerated_folder_path)?;
    memory_map::generate(
        &autogenerated_folder_path,
        &configuration.memory_configuration,
        &configuration.port
    )?;
    Ok(())
}

fn generate_top_level_module<P: AsRef<Path>>(autogenerated_folder_path: P) -> Result<()> {
    let filename = autogenerated_folder_path.as_ref().join("mod.rs");
    let mut file = OpenOptions::new().write(true).create(true).truncate(true).open(&filename)?;

    let code = quote! {
        //! This entire module is autogenerated. Don't modify it manually!
        //! Logic for generating these files is defined under `loadstone_config/src/codegen/`
        pub mod memory_map;
    };

    file.write_all(format!("{}", code).as_bytes())?;
    Ok(())
}
