use std::{fs::OpenOptions, io::Write, path::Path};
use quote::{quote, format_ident};
use anyhow::Result;

use crate::memory::MemoryConfiguration;

pub fn generate<P: AsRef<Path>>(autogenerated_folder_path: P, memory_configuration: &MemoryConfiguration) -> Result<()> {
    let mut file = OpenOptions::new()
        .write(true)
        .create(true)
        .open(autogenerated_folder_path.as_ref().join("memory_map.rs"))?;

    let number_of_mcu_banks = memory_configuration.internal_memory_map.banks.len();

    let code = quote! {
        const NUMBER_OF_MCU_BANKS: usize = #number_of_mcu_banks;
    };

    file.write_all(format!("{}", code).as_bytes())?;
    Ok(())
}

//// Serial pins and typedefs
//const EXTERNAL_NUMBER_OF_BANKS: usize = 3;
//const EXTERNAL_BANK_MAX_IMAGE_SIZE: usize = {
//    let (start, end) = (n25q128a_flash::MemoryMap::location(), n25q128a_flash::MemoryMap::end());
//    let total_size = (end.0 - start.0) as usize;
//    total_size / EXTERNAL_NUMBER_OF_BANKS
//};
//
//const MCU_NUMBER_OF_BANKS: usize = 2;
//const MCU_BANK_MAX_IMAGE_SIZE: usize = {
//    let (start, end) = (flash::MemoryMap::writable_start(), flash::MemoryMap::writable_end());
//    let total_size = (end.0 - start.0) as usize;
//    total_size / MCU_NUMBER_OF_BANKS
//};
//
//const fn min(a: usize, b: usize) -> usize { if a < b { a } else { b } }
//const IMAGE_SIZE: usize = min(MCU_BANK_MAX_IMAGE_SIZE, EXTERNAL_BANK_MAX_IMAGE_SIZE);
//
//const fn external_image_offset(index: usize) -> n25q128a_flash::Address {
//   n25q128a_flash::Address(n25q128a_flash::MemoryMap::location().0
//        + (index * IMAGE_SIZE) as u32)
//}
//
//const fn mcu_image_offset(index: usize) -> flash::Address {
//    flash::Address(flash::MemoryMap::writable_start().0
//        + (index * IMAGE_SIZE) as u32)
//}
//
//pub static MCU_BANKS: [image::Bank<flash::Address>; MCU_NUMBER_OF_BANKS] = [
//    image::Bank { index: 1, bootable: true, location: mcu_image_offset(0), size: IMAGE_SIZE, is_golden: false },
//    image::Bank { index: 2, bootable: false, location: mcu_image_offset(1), size: IMAGE_SIZE, is_golden: false },
//];
//
//pub static EXTERNAL_BANKS: [image::Bank<n25q128a_flash::Address>; EXTERNAL_NUMBER_OF_BANKS] = [
//    image::Bank { index: 3, bootable: false, location: external_image_offset(0), size: IMAGE_SIZE, is_golden: false },
//    image::Bank { index: 4, bootable: false, location: external_image_offset(1), size: IMAGE_SIZE, is_golden: true },
//    image::Bank { index: 5, bootable: false, location: external_image_offset(2), size: IMAGE_SIZE, is_golden: false },
//];
