use std::{fs::OpenOptions, io::Write, path::Path};
use anyhow::Result;
use quote::{TokenStreamExt, format_ident, quote};

use crate::{Configuration, codegen::prettify_file, features::Serial};

pub fn generate<P: AsRef<Path>>(
    autogenerated_folder_path: P,
    configuration: &Configuration,
) -> Result<()> {
    let filename = autogenerated_folder_path.as_ref().join("devices.rs");
    let mut file = OpenOptions::new().write(true).create(true).truncate(true).open(&filename)?;
    let mut code = quote!{};

    if let Serial::Enabled { tx_pin,.. } = &configuration.feature_configuration.serial {
        let peripheral = format_ident!("{}", tx_pin.peripheral);
        code.append_all(quote!{
            use super::pin_configuration::{UsartPins, Serial};
            use blue_hal::stm32pac;
            use blue_hal::hal::time;
            use blue_hal::drivers::stm32f4::rcc::Clocks;
            use blue_hal::drivers::stm32f4::serial::{self, UsartExt};
            pub fn construct_serial(serial_pins: UsartPins, peripherals: &mut stm32pac::Peripherals, clocks: Clocks) -> Serial {
                let serial_config = serial::config::Config::default().baudrate(time::Bps(115200));
                peripherals.#peripheral.constrain(serial_pins, serial_config, clocks).unwrap()
            }
        });
    }

    file.write_all(format!("{}", code).as_bytes())?;
    prettify_file(filename).ok();
    Ok(())
}

