use crate::devices::bootloader::Bootloader;
use blue_hal::{
    max32pac,
    hal::null::{NullError, NullFlash, NullSerial, NullSystick},
    drivers::max3263::flash::{self, Flash},
};
use crate::devices::image::CrcImageReader as ImageReader;
use super::update_signal::NullUpdatePlanner;
use crate::ports::autogenerated::{LOADSTONE_GREETING, memory_map::{MCU_BANKS, EXTERNAL_BANKS}};
use crate::error;

impl error::Convertible for NullError {
    fn into(self) -> error::Error { panic!() }
}

impl error::Convertible for flash::Error {
    fn into(self) -> error::Error {
        match self {
            flash::Error::AddressOutOfRange => error::Error::DriverError("Attempt to access invalid flash address."),
            flash::Error::UnalignedAccess => error::Error::DriverError("Attempt to access unaligned flash address."),
            flash::Error::PageEraseFailed => error::Error::DriverError("Flash page erase failed."),
            flash::Error::MassEraseFailed => error::Error::DriverError("Flash mass erase failed."),
            flash::Error::WriteFailed => error::Error::DriverError("Flash write failed."),
        }
    }
}

impl Bootloader<NullFlash, Flash, NullSerial, NullSystick, ImageReader, NullUpdatePlanner> {
    pub fn new() -> Self {
        let peripherals = max32pac::Peripherals::take().unwrap();

        peripherals.CLKMAN.clk_ctrl.write(|w| unsafe {
            w.system_source_select().bits(0b01)
        });

        peripherals.ICC.ctrl_stat.write(|w| {
            w.enable().set_bit()
        });

        let mcu_flash = Flash::new(peripherals.FLC);
        Bootloader {
            mcu_flash,
            external_banks: &EXTERNAL_BANKS,
            mcu_banks: &MCU_BANKS,
            external_flash: None,
            serial: None,
            boot_metrics: Default::default(),
            start_time: None,
            recovery_enabled: false,
            greeting: LOADSTONE_GREETING,
            _marker: Default::default(),
            update_planner: None,
        }
    }
}
