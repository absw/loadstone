use crate::devices::boot_manager::BootManager;
use blue_hal::{
    hal::null::{NullFlash},
    drivers::stm32f4::{
        flash::McuFlash,
        rcc::Clocks,
    },
    stm32pac,
};
use crate::devices::{
    image::CrcImageReader as ImageReader,
    cli::Cli,
};
use super::update_signal::NullUpdatePlanner;
use super::autogenerated::{
    self,
    devices,
    memory_map::{EXTERNAL_BANKS, MCU_BANKS},
    pin_configuration::{self, *},
};

impl BootManager<McuFlash, NullFlash, Serial, ImageReader, NullUpdatePlanner> {
    pub fn new() -> Self {
        let mut peripherals = stm32pac::Peripherals::take().unwrap();
        let mcu_flash = McuFlash::new(peripherals.FLASH).unwrap();

        let (serial_pins, _) = pin_configuration::pins(
            peripherals.GPIOA,
            peripherals.GPIOB,
            peripherals.GPIOC,
            peripherals.GPIOD,
            peripherals.GPIOE,
            peripherals.GPIOF,
            peripherals.GPIOG,
            peripherals.GPIOH,
            &mut peripherals.RCC,
        );
        let clocks = Clocks::hardcoded(peripherals.RCC);
        let serial = devices::construct_serial(
            serial_pins,
            clocks,
            peripherals.USART1,
            peripherals.USART2,
            peripherals.USART3,
            peripherals.UART4,
            peripherals.UART5,
            peripherals.USART6,
        );

        let cli = if let Some(s) = serial {
            Some(Cli::new(s).unwrap())
        } else {
            None
        };

        BootManager {
            external_banks: &EXTERNAL_BANKS,
            mcu_banks: &MCU_BANKS,
            mcu_flash,
            external_flash: None,
            cli,
            boot_metrics: Default::default(),
            greeting: Some(autogenerated::LOADSTONE_GREETING),
            _marker: Default::default(),
            update_signal: None,
        }
    }
}

// impl error::Convertible for serial::Error {
//     fn into(self) -> error::Error {
//         match self {
//             serial::Error::Framing => error::Error::DriverError("[Serial] Framing error"),
//             serial::Error::Noise => error::Error::DriverError("[Serial] Noise error"),
//             serial::Error::Overrun => error::Error::DriverError("[Serial] Overrun error"),
//             serial::Error::Parity => error::Error::DriverError("[Serial] Parity error"),
//             serial::Error::Timeout => error::Error::DriverError("[Serial] Timeout error"),
//             _ => error::Error::DriverError("[Serial] Unexpected serial error"),
//         }
//     }
// }
