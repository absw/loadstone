//! Concrete boot manager construction and flash bank layout
//! for the [stm32f412 discovery](../../../../loadstone/hardware/discovery.pdf).
use crate::{autogenerated::devices, devices::{boot_manager::BootManager, cli::Cli}};
use blue_hal::{drivers::stm32f4::{flash, rcc::Clocks, systick::SysTick}, hal::time, stm32pac};

use crate::autogenerated::pin_configuration::{self, *};
use crate::autogenerated::memory_map::EXTERNAL_BANKS;
use crate::autogenerated::memory_map::MCU_BANKS;

impl Default for BootManager<flash::McuFlash, ExternalFlash, Serial> {
    fn default() -> Self { Self::new() }
}

impl BootManager<flash::McuFlash, ExternalFlash, Serial> {
    pub fn new() -> Self {
        let mut peripherals = stm32pac::Peripherals::take().unwrap();
        let cortex_peripherals = cortex_m::Peripherals::take().unwrap();
        let mcu_flash = flash::McuFlash::new(peripherals.FLASH).unwrap();
        let (serial_pins, qspi_pins) = pin_configuration::pins(
                peripherals.GPIOA,
                peripherals.GPIOB,
                peripherals.GPIOC,
                peripherals.GPIOD,
                peripherals.GPIOE,
                peripherals.GPIOF,
                peripherals.GPIOG,
                peripherals.GPIOH,
                &mut peripherals.RCC,
            );
        let clocks = Clocks::hardcoded(peripherals.RCC);
        SysTick::init(cortex_peripherals.SYST, clocks);
        SysTick::wait(time::Seconds(1)); // Gives time for the flash chip to stabilize after powerup

        let serial = devices::construct_serial(
            serial_pins,
            clocks,
            peripherals.USART1,
            peripherals.USART2,
            peripherals.USART6)
            .expect("Demo app can't function without serial!");
        let cli = Cli::new(serial).unwrap();
        let external_flash = devices::construct_flash(qspi_pins, peripherals.QUADSPI);

        BootManager {
            external_flash,
            mcu_flash,
            external_banks: &EXTERNAL_BANKS,
            mcu_banks: &MCU_BANKS,
            cli: Some(cli),
            boot_metrics: None
        }
    }
}
